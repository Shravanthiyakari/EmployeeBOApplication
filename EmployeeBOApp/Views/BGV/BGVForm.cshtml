@model EmployeeBOApp.Models.EmployeeInformation

@{
    ViewData["Title"] = "BVG Request";
}

<h2>BVG Request</h2>

@if (TempData["Message"] != null)
{
    <div class="alert alert-success">@TempData["Message"]</div>
}

<form id="employeeInfoForm" asp-action="InitiateBGV" method="post">

    <div class="form-group">
        <label for="EmpId">Emp ID <span style="color:red;">*</span></label>
        <input type="text" id="EmpId" name="EmpId" class="form-control"
               maxlength="8"
               pattern="^P\d{7}$"
               title="Emp ID should start with 'P' followed by 7 digits (e.g., PO123456)"
               required />
        <span asp-validation-for="EmpId" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label for="EmpName">Employee Name <span style="color:red;">*</span></label>
        <input type="text" id="EmpName" name="EmpName" class="form-control" required />
        <span asp-validation-for="EmpName" class="text-danger"></span>
    </div>

    <input type="hidden" id="confirm" name="confirm" value="false" />
    <input type="hidden" id="BGVMappingId" name="BGVMappingId" value="" />

    <div class="form-group row mt-3">
        <div class="col-sm-12 text-end">
            <button type="submit" class="btn btn-success me-2">Submit Request</button>
            <button type="reset" class="btn btn-secondary">Clear</button>
        </div>
    </div>
</form>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const form = document.getElementById("employeeInfoForm");
            const empIdInput = document.getElementById("EmpId");
            //const bgvMappingInput = document.getElementById("BGVMappingId");

            form.addEventListener("submit", async function (e) {
                e.preventDefault(); // stop native submit

                const empId = empIdInput.value.trim();
                if (!empId) {
                    alert("Please enter a valid Employee ID.");
                    return;
                }

                try {
                    const response = await fetch(`/BGV/CheckExistingBGV?empId=${encodeURIComponent(empId)}`);
                    if (!response.ok) throw new Error("Server error");

                    const result = await response.json();

                    if (result.exists) {
                        const bgvid = result.bgvid;
                        const projectId = result.projectId;
                        const isClosed = result.projectStatus;
                        const deBgvId = result.empbgvid;
                        const deProjectId = result.empbgvproject;
                        const deallocationStatus = result.deallocationStatus;
                        const expirationDate = result.expirationDate;

                        let message = "";

                        if (bgvid != null) {
                           const expiry = new Date(expirationDate); // Assuming ExpiryDate is a valid date string
                           const now = new Date();
                           if (expiry < now) {
                                message = `BGV has already expired on ${expirationDate}. Please initate the new request?`;
                           }
                       
                        }             
                        else if(deallocationStatus)
                        {
                          message = `This employee was deallocated from Project ID: ${deProjectId}. A BGV already exists (BGV ID: ${deBgvId}). Do you want to proceed with a new BGV request?`;
                        }
                        else{
                         message = `BGV already exists and is set to expire on ${expirationDate}. Would you still like to proceed with a new request?`;

                        }

                        if (message) {
                            if (confirm(message)) {
                                document.getElementById("confirm").value = "true";
                                form.submit();
                            }
                        } else {
                            // Default: allow to submit if none of the above apply
                            form.submit();
                        }
                    } else {
                        form.submit();
                    }
                } catch (err) {
                    alert("Error checking BGV status: " + err.message);
                }

            });

            // Fade out success alert
            const alertBox = document.querySelector(".alert-success");
            if (alertBox) {
                setTimeout(() => {
                    alertBox.style.transition = "opacity 1s ease";
                    alertBox.style.opacity = '0';
                    setTimeout(() => {
                        alertBox.remove();
                    }, 1000);
                }, 3000);
            }
        });
    </script>
}
